{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","search","target","value","state","fetch","then","res","json","data","this","filteredMonster","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAY,OAAjB,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,UAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJjBC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLhDO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCiC/DG,E,kDAhCb,aAAe,IAAD,8BACZ,gBAOFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAPjC,EAAKC,MAAQ,CACXb,SAAU,GACVU,OAAQ,IAJE,E,qDAad,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAET,SAAUkB,S,oBAG9C,WAAU,IAAD,EACsBC,KAAKN,MAA1Bb,EADD,EACCA,SAAUU,EADX,EACWA,OACZU,EAAkBpB,EAASqB,QAAO,SAAC3B,GAAD,OAAaA,EAAQG,KAAKyB,cAAcC,SAASb,EAAOY,kBAChG,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,yBACA,cAAC,EAAD,CAAWW,YAAY,qBAAqBC,aAAce,KAAKf,eAC/D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA3BVI,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.053cb1ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => {\r\n    return(\r\n        <div className = \"card\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set1&size=150x150`} alt=\"Robot\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {\r\n          props.monsters.map((monster) => <Card key={monster.id} monster={monster}></Card>)\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      search: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ search: e.target.value });\n  };\n\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => this.setState({ monsters: data }));\n  }\n\n  render() {\n    const { monsters, search } = this.state; // Destructuring\n    const filteredMonster = monsters.filter((monster) => monster.name.toLowerCase().includes(search.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">Monster App</h1>\n        <SearchBox placeholder=\"Search the Monster\" handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonster}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}